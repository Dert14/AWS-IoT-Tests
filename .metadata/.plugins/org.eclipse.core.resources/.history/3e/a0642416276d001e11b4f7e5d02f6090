/*
 * Copyright 2010-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * Additions Copyright 2016 Espressif Systems (Shanghai) PTE LTD
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
/**
 * @file thing_shadow_sample.c
 * @brief A simple connected window example demonstrating the use of Thing Shadow
 *
 * See example README for more details.
 */
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <unistd.h>
#include <limits.h>
#include <string.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "esp_vfs_fat.h"
#include "driver/sdmmc_host.h"

#include "nvs.h"
#include "nvs_flash.h"

#include "aws_iot_config.h"
#include "aws_iot_log.h"
#include "aws_iot_version.h"
#include "aws_iot_mqtt_client_interface.h"
#include "aws_iot_shadow_interface.h"

//moje dodatkowe biblioteki
#include "driver/gpio.h"
#define PIN_NUMBER 5
bool state = false;

void TogglePinTask(void *pvParameters) {
    (void)pvParameters; // Unikni�cie komunikatu o nieu�ytej zmiennej

    // Konfiguracja pinu jako wyj�cie
    gpio_pad_select_gpio(PIN_NUMBER);
    gpio_set_direction(PIN_NUMBER, GPIO_MODE_OUTPUT);

    while (1) {
        // Przyk�adowy kod zmieniaj�cy stan pinu w zale�no�ci od warto�ci bool
        // Tutaj mo�na poda� dowoln� warto�� true/false
        gpio_set_level(PIN_NUMBER, state ? 1 : 0);

        // Przyk�ad u�ycia vTaskDelay, aby task wykonywa� si� co pewien czas
        vTaskDelay(pdMS_TO_TICKS(1000)); // 1000 ms = 1 sekunda
    }
}

#include <esp_idf_version.h>
#if ESP_IDF_VERSION >= ESP_IDF_VERSION_VAL(4, 1, 0)
// Features supported in 4.1+
#define ESP_NETIF_SUPPORTED
#endif



static const char *TAG = "shadow";

//maksymalna d�ugo� przes�anego update Jsona
#define MAX_LENGTH_OF_UPDATE_JSON_BUFFER 200

/* The examples use simple WiFi configuration that you can set via
   'make menuconfig'.

   If you'd rather not, just change the below entries to strings with
   the config you want - ie #define EXAMPLE_WIFI_SSID "mywifissid"
*/

//mo�na wpisac r�cznie "WIFI_SSID" oraz "WIFI_PASSWORD", ale lepiej pewnie z sdkconfig
#define EXAMPLE_WIFI_SSID CONFIG_WIFI_SSID
#define EXAMPLE_WIFI_PASS CONFIG_WIFI_PASSWORD


//grupa FreeRTOS do sygnalizowania kiedy jeste�my po��czeni i gotowi do wys�ania requestu
static EventGroupHandle_t wifi_event_group;

/* The event group allows multiple bits for each event,
   but we only care about one event - are we connected
   to the AP with an IP? */

//ten bit wydaje sie �e oznacza czy jeste�my po��czeni z AP o tym IP
const int CONNECTED_BIT = BIT0;



//odczytujemy nasze certyfikaty i (chyba) zamieniamy je na binarki

extern const uint8_t aws_root_ca_pem_start[] asm("_binary_aws_root_ca_pem_start");
extern const uint8_t aws_root_ca_pem_end[] asm("_binary_aws_root_ca_pem_end");
extern const uint8_t certificate_pem_crt_start[] asm("_binary_certificate_pem_crt_start");
extern const uint8_t certificate_pem_crt_end[] asm("_binary_certificate_pem_crt_end");
extern const uint8_t private_pem_key_start[] asm("_binary_private_pem_key_start");
extern const uint8_t private_pem_key_end[] asm("_binary_private_pem_key_end");

//event handler s�u��cy do
//sprawdzania jaki to event g��wny a potem konkretnie po ID

static void event_handler(void* arg, esp_event_base_t event_base,
                          int32_t event_id, void* event_data)
{
	//je�li to WIFI_EVENT oraz WIFI_EVENT_STA_START to esp ��czymy z wifi
    if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START) {
        esp_wifi_connect();

    //je�li to IP_EVENT oraz IP_EVENT_STA_GOT_IP to ��czymy si� z IP ??????????????????????????????????????????????????
    } else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {
        ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;
        ESP_LOGI(TAG, "Connected with IP Address:" IPSTR, IP2STR(&event->ip_info.ip));
        /* Signal main application to continue execution */

    //uznajemy �e si� po��czyli�my i ustawiamy bity
        xEventGroupSetBits(wifi_event_group, CONNECTED_BIT);
        //je�li to WIFI_EVENT oraz WIFI_EVENT_STA_DISCONNECTED to pr�bujemy ponownie si� po��czyc
    } else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED) {
        ESP_LOGI(TAG, "Disconnected. Connecting to the AP again...");
        esp_wifi_connect();
     //uznajemy �e si� roz��czyli�my i resetujemy bity
        xEventGroupClearBits(wifi_event_group, CONNECTED_BIT);
    }
}


//zmienna do sygnalizowania stanu pracy shadowa
static bool shadowUpdateInProgress;



void ShadowUpdateStatusCallback(const char *pThingName, ShadowActions_t action, Shadow_Ack_Status_t status,
                                const char *pReceivedJsonDocument, void *pContextData) {

	//raczej �eby nie wywala�o b��d�w przy braku u�ycia
    IOT_UNUSED(pThingName);
    IOT_UNUSED(action);
    IOT_UNUSED(pReceivedJsonDocument);
    IOT_UNUSED(pContextData);

    shadowUpdateInProgress = false;

    //sprawdzamy czy update zosta� zaakceptowany
    if(SHADOW_ACK_TIMEOUT == status) {
        ESP_LOGE(TAG, "Update timed out");
    } else if(SHADOW_ACK_REJECTED == status) {
        ESP_LOGE(TAG, "Update rejected");
    } else if(SHADOW_ACK_ACCEPTED == status) {
        ESP_LOGI(TAG, "Update accepted");
    }
}

//callback kt�ry zapisuje w logach je�li pContext != NULL
void socketActuate_Callback(const char *pJsonString, uint32_t JsonStringDataLen, jsonStruct_t *pContext) {
    IOT_UNUSED(pJsonString);
    IOT_UNUSED(JsonStringDataLen);

    if(pContext != NULL) {
    	//ESP_LOGI(TAG, "Delta changed");
        ESP_LOGI(TAG, "Delta - Socket state changed to %d", *(bool *) (pContext->pData));
        state = *(bool *) pContext->pData;
        ESP_LOGI(TAG, "Stan pinu 5 to %d", state);
    }
}

void gpio_task(void *arg) {
    // Konfiguruj pin 5 jako wyj�cie
    gpio_config_t io_conf;
    io_conf.intr_type = GPIO_INTR_DISABLE;
    io_conf.mode = GPIO_MODE_OUTPUT;
    io_conf.pin_bit_mask = (1ULL << GPIO_NUM_5);
    io_conf.pull_up_en = GPIO_PULLUP_DISABLE;
    io_conf.pull_down_en = GPIO_PULLDOWN_DISABLE;
    gpio_config(&io_conf);

    while (1) {
        // Ustaw pin 6 na stan wysoki (w��czony)
        gpio_set_level(GPIO_NUM_6, 1);
        vTaskDelay(1000 / portTICK_RATE_MS);  // Op�nienie 1 sekundy
        // Ustaw pin 6 na stan niski (wy��czony)
        gpio_set_level(GPIO_NUM_6, 0);
        vTaskDelay(1000 / portTICK_RATE_MS);  // Op�nienie 1 sekundy
    }
}


//Tworzymy g��wny task komunikacji IoT
void aws_iot_task(void *param) {

	//bazowo zak�adamy �e status po��cznia jest nieudany???
    IoT_Error_t rc = FAILURE;

    char JsonDocumentBuffer[MAX_LENGTH_OF_UPDATE_JSON_BUFFER];
    size_t sizeOfJsonDocumentBuffer = sizeof(JsonDocumentBuffer) / sizeof(JsonDocumentBuffer[0]);

    bool socket_on = false;
    //Tworzymy json struct do dalszego u�ytku
    jsonStruct_t socket_actuator;
    socket_actuator.cb = socketActuate_Callback;
    socket_actuator.pData = &socket_on;
    socket_actuator.pKey = "socket_on";
    socket_actuator.type = SHADOW_JSON_BOOL;
    socket_actuator.dataLength = sizeof(bool);

    ESP_LOGI(TAG, "AWS IoT SDK Version %d.%d.%d-%s", VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH, VERSION_TAG);

    // inicjalizujemy mqtt client
    AWS_IoT_Client mqttClient;

    ShadowInitParameters_t sp = ShadowInitParametersDefault;
    //przypisujemy (hosta?) i port
    sp.pHost = AWS_IOT_MQTT_HOST;
    sp.port = AWS_IOT_MQTT_PORT;

    //przypisujemy nasze binarne cety
    sp.pClientCRT = (const char *)certificate_pem_crt_start;
    sp.pClientKey = (const char *)private_pem_key_start;
    sp.pRootCA = (const char *)aws_root_ca_pem_start;
    //ponowne ��czenie si� jest wy��czone
    sp.enableAutoReconnect = false;
    sp.disconnectHandler = NULL;

    //Czekamy a� po��czymy si� z WiFi
    xEventGroupWaitBits(wifi_event_group, CONNECTED_BIT,
                        false, true, portMAX_DELAY);

    //inicjalizujemy shadowa i sprawdzamy czy z sukcesem, je�li nie to przerywamy, je�li tak to dalej lecimy
    ESP_LOGI(TAG, "Shadow Init");
    rc = aws_iot_shadow_init(&mqttClient, &sp);
    if(SUCCESS != rc) {
        ESP_LOGE(TAG, "aws_iot_shadow_init returned error %d, aborting...", rc);
        abort();
    }

    //u�ywamy naszych credenciali do ��czenia z shadowem
    ShadowConnectParameters_t scp = ShadowConnectParametersDefault;
    scp.pMyThingName = CONFIG_AWS_EXAMPLE_THING_NAME;
    scp.pMqttClientId = CONFIG_AWS_EXAMPLE_CLIENT_ID;
    scp.mqttClientIdLen = (uint16_t) strlen(CONFIG_AWS_EXAMPLE_CLIENT_ID);

    //��czymy si� z shadowem i sprawdzamy czy z sukcesem, je�li nie to przerywamy, je�li tak to dalej lecimy
    ESP_LOGI(TAG, "Shadow Connect");
    rc = aws_iot_shadow_connect(&mqttClient, &scp);
    if(SUCCESS != rc) {
        ESP_LOGE(TAG, "aws_iot_shadow_connect returned error %d, aborting...", rc);
        abort();
    }

    /*
     * Enable Auto Reconnect functionality. Minimum and Maximum time of Exponential backoff are set in aws_iot_config.h
     *  #AWS_IOT_MQTT_MIN_RECONNECT_WAIT_INTERVAL
     *  #AWS_IOT_MQTT_MAX_RECONNECT_WAIT_INTERVAL
     */
    rc = aws_iot_shadow_set_autoreconnect_status(&mqttClient, true);
    if(SUCCESS != rc) {
        ESP_LOGE(TAG, "Unable to set Auto Reconnect to true - %d, aborting...", rc);
        abort();
    }

    //W tym miejscu obs�ugujemy delte shadowa przez temperatureHandler
    //jest te� update ale delta jest �atwiejsza
    rc = aws_iot_shadow_register_delta(&mqttClient, &socket_actuator);

    if(SUCCESS != rc) {
        ESP_LOGE(TAG, "Shadow Register Delta Error");
    }

    // publikujemy zmiany temperatury w loopie
    while(NETWORK_ATTEMPTING_RECONNECT == rc || NETWORK_RECONNECTED == rc || SUCCESS == rc) {
        rc = aws_iot_shadow_yield(&mqttClient, 200);
        if(NETWORK_ATTEMPTING_RECONNECT == rc || shadowUpdateInProgress) {
            rc = aws_iot_shadow_yield(&mqttClient, 1000);
            //Je�li klient pr�buje ponownie si� po��czyc lub ju� czeka na shadow update
            //pomijamy reszte p�tli
            continue;
        }
        //wypisujemy temperature i stan okna
        ESP_LOGI(TAG, "=======================================================================================");
        ESP_LOGI(TAG, "On Device: socket state %s", socket_on ? "true" : "false");

        //Ty by�a funkcja TEMP!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        //Tworzymy w tym momencie Jsona kt�rego wysy�amy, raport stanu naszego urz�dzenia (tylko reported)
        rc = aws_iot_shadow_init_json_document(JsonDocumentBuffer, sizeOfJsonDocumentBuffer);
        if(SUCCESS == rc) {
        	//dodajemy reported
            rc = aws_iot_shadow_add_reported(JsonDocumentBuffer, sizeOfJsonDocumentBuffer, 1, &socket_actuator);
            //je�li si� uda�o to finalizujemy naszego Jsona
            if(SUCCESS == rc) {
                rc = aws_iot_finalize_json_document(JsonDocumentBuffer, sizeOfJsonDocumentBuffer);
                //je�li si� uda�o to raportujemy i wysy�amy naszego jsona
                if(SUCCESS == rc) {
                    ESP_LOGI(TAG, "Update Shadow: %s", JsonDocumentBuffer);
                    rc = aws_iot_shadow_update(&mqttClient, CONFIG_AWS_EXAMPLE_THING_NAME, JsonDocumentBuffer,
                                               ShadowUpdateStatusCallback, NULL, 4, true);
                    shadowUpdateInProgress = true;
                }
            }
        }
        //ile zosta�o stacka na taska?
        ESP_LOGI(TAG, "*****************************************************************************************");
        ESP_LOGI(TAG, "Stack remaining for task '%s' is %d bytes", pcTaskGetName(NULL), uxTaskGetStackHighWaterMark(NULL));

        //Wykonujemy taska co 1s
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }

    //Je�li co� posz�o nie tak to wychodzuimy z loopa i raporcik
    if(SUCCESS != rc) {
        ESP_LOGE(TAG, "An error occurred in the loop %d", rc);
    }

    //roz��czmy si� z shadowem
    ESP_LOGI(TAG, "Disconnecting");
    rc = aws_iot_shadow_disconnect(&mqttClient);

    //je�li error przy roz��czaniu
    if(SUCCESS != rc) {
        ESP_LOGE(TAG, "Disconnect error %d", rc);
    }

    vTaskDelete(NULL);
}

//Inicjalizacja WiFi
static void initialise_wifi(void)
{
    esp_netif_init();
    //sprawdzamy errory podczas gdy
    //tworzymy event_loop i tworzymy handlery dla WIFI_EVENT i IP_EVENT
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    ESP_ERROR_CHECK(esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, &event_handler, NULL));
    ESP_ERROR_CHECK(esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, &event_handler, NULL));

    /* Initialize Wi-Fi including netif with default config */
#ifdef ESP_NETIF_SUPPORTED
    esp_netif_create_default_wifi_sta();
#endif
    //dynamicznie alokujemy pami�c dzieki freeRtos?
    wifi_event_group = xEventGroupCreate();
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK( esp_wifi_init(&cfg) );
    ESP_ERROR_CHECK( esp_wifi_set_storage(WIFI_STORAGE_RAM) );

    //Tutaj przypisujemy nasze SSID WiFi oraz has�o
    wifi_config_t wifi_config = {
        .sta = {
            .ssid = EXAMPLE_WIFI_SSID,
            .password = EXAMPLE_WIFI_PASS,
        },
    };

    //je�eli pasy s� ok to si� po��czymy
    ESP_LOGI(TAG, "Setting WiFi configuration SSID %s...", wifi_config.sta.ssid);
    ESP_ERROR_CHECK( esp_wifi_set_mode(WIFI_MODE_STA) );
    ESP_ERROR_CHECK( esp_wifi_set_config(WIFI_IF_STA, &wifi_config) );
    ESP_ERROR_CHECK( esp_wifi_start() );
}

void app_main()
{
	//tworzymy zmienn� na errory w pami�ci nie ulotnej
    esp_err_t err = nvs_flash_init();

    //nie czaje raczej
    if (err == ESP_ERR_NVS_NO_FREE_PAGES || err == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        err = nvs_flash_init();
    }
    ESP_ERROR_CHECK( err );

    initialise_wifi();
    /* Temporarily pin task to core, due to FPU uncertainty */
    xTaskCreatePinnedToCore(&aws_iot_task, "aws_iot_task", 9216, NULL, 5, NULL, 1);
    xTaskCreatePinnedToCore(TogglePinTask, "TogglePinTask", configMINIMAL_STACK_SIZE, NULL, 1, NULL, 0);

}
